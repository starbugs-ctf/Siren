import { handleError } from "app/apiUtil"
import { BlitzApiRequest, BlitzApiResponse, BlitzApiHandler } from "blitz"
import db from "db"
import * as z from "zod"

const CreateExploitSchema = z.object({
  createdAt: z.date().optional(),
  name: z.string(),
  key: z.string(),
  problemId: z.number(),
})

const DeleteExploitSchema = z.object({
  name: z.string(),
  problemId: z.number(),
})

const handler: BlitzApiHandler = async (req: BlitzApiRequest, res: BlitzApiResponse) => {
  if (req.method !== "GET" && req.method !== "POST" && req.method !== "DELETE") {
    res.status(405).json({
      msg: "Method not allowed",
    })
    return
  }

  try {
    if (req.method === "GET") {
      const exploits = await db.exploit.findMany()
      res.status(200).json(exploits)
    } else if (req.method === "POST") {
      const args = CreateExploitSchema.parse(req.body)

      // Disable all previous exploits with the same name & target
      await db.exploit.updateMany({
        data: {
          enabled: false,
        },
        where: {
          name: args.name,
          problemId: args.problemId,
        },
      })

      const exploit = await db.exploit.upsert({
        where: {
          key: args.key,
        },
        update: {
          enabled: true,
        },
        create: {
          ...args,
        },
      })

      res.status(200).json(exploit)
    } else if (req.method === "DELETE") {
      const args = DeleteExploitSchema.parse(req.body)

      const result = await db.exploit.updateMany({
        data: {
          enabled: false,
        },
        where: {
          ...args,
        },
      })

      res.status(200).json({
        meta: result,
      })
    }
  } catch (err) {
    handleError(err, res)
  }
}

export default handler
