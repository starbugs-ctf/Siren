import { handleError } from "app/apiUtil"
import { BlitzApiRequest, BlitzApiResponse, BlitzApiHandler } from "blitz"
import db from "db"
import * as z from "zod"

const SuccessfulExploitSchema = z.object({
  roundId: z.number(),
  problemId: z.number(),
  teamId: z.number(),
})

const handler: BlitzApiHandler = async (req: BlitzApiRequest, res: BlitzApiResponse) => {
  if (req.method !== "POST") {
    res.status(405).json({
      msg: "Method not allowed",
    })
    return
  }

  try {
    const args = SuccessfulExploitSchema.parse(req.body)

    const successfulExploitCount = await db.task.count({
      where: {
        AND: [
          {
            roundId: args.roundId,
          },
          {
            exploit: {
              problemId: args.problemId,
            },
          },
          {
            teamId: args.teamId,
          },
          {
            flagSubmission: {
              submissionResult: "CORRECT",
            },
          },
        ],
      },
    })

    if (successfulExploitCount > 0) {
      res.status(200).json({
        exists: true,
        fromDuplicate: false,
      })
      return
    }

    const duplicateExploitCount = await db.task.count({
      where: {
        AND: [
          {
            roundId: args.roundId,
          },
          {
            exploit: {
              problemId: args.problemId,
            },
          },
          {
            teamId: args.teamId,
          },
          {
            flagSubmission: {
              submissionResult: "DUPLICATE",
            },
          },
        ],
      },
    })

    if (duplicateExploitCount > 0) {
      res.status(200).json({
        exists: true,
        fromDuplicate: true,
      })
      return
    }

    res.status(200).json({
      exists: false,
      fromDuplicate: false,
    })
  } catch (err) {
    handleError(err, res)
  }
}

export default handler
