// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model Round {
  id    Int     @id @default(autoincrement())
  alias String?

  tasks Task[]
}

model RoundRange {
  id Int @id @default(autoincrement())

  startRoundId Int
  endRoundId   Int

  startTime       DateTime
  durationSeconds Int
}

model Team {
  id Int @id @default(autoincrement())

  name String
  slug String @unique
  aux  String

  exploitsTargetingThisTeam Task[]
}

model Problem {
  id Int @id @default(autoincrement())

  name String
  slug String @unique
  aux  String

  exploits Exploit[]
}

model Exploit {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  // name: human readable name
  name String
  // key: machine specified name (e.g., with hash)
  key  String @unique

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  tasks Task[]
}

model Task {
  id Int @id @default(autoincrement())

  // enum: PENDING, RUNNING, OKAY, RUNTIME_ERROR, TIMEOUT
  status        String
  statusMessage String
  createdAt     DateTime @default(now())

  roundCache Round? @relation(fields: [roundId], references: [id])
  roundId    Int?

  stdout String?
  stderr String?

  flagSubmission FlagSubmission?

  exploit   Exploit @relation(fields: [exploitId], references: [id])
  exploitId Int

  team   Team @relation(fields: [teamId], references: [id])
  teamId Int
}

model FlagSubmission {
  id Int @id @default(autoincrement())

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  submissionTime DateTime @default(now())

  flag String

  // enum: CORRECT, DUPLICATE, WRONG, EXPIRED, SKIPPED, UNKNOWN_ERROR
  submissionResult String
  message          String
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
