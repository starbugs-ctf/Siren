model Round {
  id    Int     @id @default(autoincrement())
  alias String?

  tasks Task[]
}

model RoundRange {
  id Int @id @default(autoincrement())

  startRoundId Int
  endRoundId   Int

  startTime       DateTime
  durationSeconds Int
}

model Team {
  id Int @id @default(autoincrement())

  name String
  slug String @unique
  aux  String

  exploitsTargetingThisTeam Task[]
}

model Problem {
  id Int @id @default(autoincrement())

  name String
  slug String @unique
  aux  String

  exploits Exploit[]
}

model Exploit {
  id Int @id @default(autoincrement())

  name  String
  alias String?

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  tasks Task[]
}

model Task {
  id Int @id @default(autoincrement())

  // enum: PENDING, RUNNING, OKAY, RUNTIME_ERROR, TIMEOUT
  status        String
  statusMessage String
  createdAt     DateTime @default(now())

  roundCache Round? @relation(fields: [roundId], references: [id])
  roundId    Int?

  stdout String?
  stderr String?

  flagSubmission FlagSubmission?

  exploit   Exploit @relation(fields: [exploitId], references: [id])
  exploitId Int

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model FlagSubmission {
  id Int @id @default(autoincrement())

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  submissionTime DateTime @default(now())

  flag String

  // enum: CORRECT, DUPLICATE, WRONG, EXPIRED, SKIPPED, UNKNOWN_ERROR
  submissionResult String
  message          String
}
